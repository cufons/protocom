// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pcomserver.proto
// Protobuf C++ Version: 4.26.0-dev

#include "pcomserver.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr ServerAuthResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        serverinfo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{static_cast< ::ServerAuthResponse_ResponseStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ServerAuthResponse::ServerAuthResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ServerAuthResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerAuthResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerAuthResponseDefaultTypeInternal() {}
  union {
    ServerAuthResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerAuthResponseDefaultTypeInternal _ServerAuthResponse_default_instance_;

inline constexpr KexMsg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : pkey_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        alg_{static_cast< ::KexMsg_KexAlg >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KexMsg::KexMsg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct KexMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KexMsgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KexMsgDefaultTypeInternal() {}
  union {
    KexMsg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KexMsgDefaultTypeInternal _KexMsg_default_instance_;

inline constexpr ClientAuthRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        authcredential_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        request_{static_cast< ::ClientAuthRequest_RequestType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ClientAuthRequest::ClientAuthRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ClientAuthRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientAuthRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientAuthRequestDefaultTypeInternal() {}
  union {
    ClientAuthRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientAuthRequestDefaultTypeInternal _ClientAuthRequest_default_instance_;

inline constexpr ServerConnectedStateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        iv_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        kex_{nullptr},
        status_{static_cast< ::ServerConnectedStateResponse_ResponseStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ServerConnectedStateResponse::ServerConnectedStateResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ServerConnectedStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerConnectedStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerConnectedStateResponseDefaultTypeInternal() {}
  union {
    ServerConnectedStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerConnectedStateResponseDefaultTypeInternal _ServerConnectedStateResponse_default_instance_;

inline constexpr ClientConnectedStateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        kex_{nullptr},
        type_{static_cast< ::ClientConnectedStateRequest_RequestType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ClientConnectedStateRequest::ClientConnectedStateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ClientConnectedStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientConnectedStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientConnectedStateRequestDefaultTypeInternal() {}
  union {
    ClientConnectedStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientConnectedStateRequestDefaultTypeInternal _ClientConnectedStateRequest_default_instance_;
PROTOBUF_CONSTINIT const uint32_t KexMsg_KexAlg_internal_data_[] = {
    131072u, 0u, };
bool KexMsg_KexAlg_IsValid(int value) {
  return 0 <= value && value <= 1;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    KexMsg_KexAlg_strings[2] = {};

static const char KexMsg_KexAlg_names[] = {
    "KEX_ECDH"
    "KEX_UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry KexMsg_KexAlg_entries[] =
    {
        {{&KexMsg_KexAlg_names[0], 8}, 1},
        {{&KexMsg_KexAlg_names[8], 11}, 0},
};

static const int KexMsg_KexAlg_entries_by_number[] = {
    1,  // 0 -> KEX_UNKNOWN
    0,  // 1 -> KEX_ECDH
};

const std::string& KexMsg_KexAlg_Name(KexMsg_KexAlg value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          KexMsg_KexAlg_entries, KexMsg_KexAlg_entries_by_number,
          2, KexMsg_KexAlg_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      KexMsg_KexAlg_entries, KexMsg_KexAlg_entries_by_number, 2,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : KexMsg_KexAlg_strings[idx].get();
}

bool KexMsg_KexAlg_Parse(absl::string_view name, KexMsg_KexAlg* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      KexMsg_KexAlg_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<KexMsg_KexAlg>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr KexMsg_KexAlg KexMsg::KEX_UNKNOWN;
constexpr KexMsg_KexAlg KexMsg::KEX_ECDH;
constexpr KexMsg_KexAlg KexMsg::KexAlg_MIN;
constexpr KexMsg_KexAlg KexMsg::KexAlg_MAX;
constexpr int KexMsg::KexAlg_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t ClientConnectedStateRequest_RequestType_internal_data_[] = {
    196608u, 0u, };
bool ClientConnectedStateRequest_RequestType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    ClientConnectedStateRequest_RequestType_strings[3] = {};

static const char ClientConnectedStateRequest_RequestType_names[] = {
    "REQUEST_AUTH"
    "REQUEST_KEX"
    "UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry ClientConnectedStateRequest_RequestType_entries[] =
    {
        {{&ClientConnectedStateRequest_RequestType_names[0], 12}, 2},
        {{&ClientConnectedStateRequest_RequestType_names[12], 11}, 1},
        {{&ClientConnectedStateRequest_RequestType_names[23], 7}, 0},
};

static const int ClientConnectedStateRequest_RequestType_entries_by_number[] = {
    2,  // 0 -> UNKNOWN
    1,  // 1 -> REQUEST_KEX
    0,  // 2 -> REQUEST_AUTH
};

const std::string& ClientConnectedStateRequest_RequestType_Name(ClientConnectedStateRequest_RequestType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          ClientConnectedStateRequest_RequestType_entries, ClientConnectedStateRequest_RequestType_entries_by_number,
          3, ClientConnectedStateRequest_RequestType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      ClientConnectedStateRequest_RequestType_entries, ClientConnectedStateRequest_RequestType_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : ClientConnectedStateRequest_RequestType_strings[idx].get();
}

bool ClientConnectedStateRequest_RequestType_Parse(absl::string_view name, ClientConnectedStateRequest_RequestType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      ClientConnectedStateRequest_RequestType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ClientConnectedStateRequest_RequestType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ClientConnectedStateRequest_RequestType ClientConnectedStateRequest::UNKNOWN;
constexpr ClientConnectedStateRequest_RequestType ClientConnectedStateRequest::REQUEST_KEX;
constexpr ClientConnectedStateRequest_RequestType ClientConnectedStateRequest::REQUEST_AUTH;
constexpr ClientConnectedStateRequest_RequestType ClientConnectedStateRequest::RequestType_MIN;
constexpr ClientConnectedStateRequest_RequestType ClientConnectedStateRequest::RequestType_MAX;
constexpr int ClientConnectedStateRequest::RequestType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t ServerConnectedStateResponse_ResponseStatus_internal_data_[] = {
    393216u, 0u, };
bool ServerConnectedStateResponse_ResponseStatus_IsValid(int value) {
  return 0 <= value && value <= 5;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    ServerConnectedStateResponse_ResponseStatus_strings[6] = {};

static const char ServerConnectedStateResponse_ResponseStatus_names[] = {
    "AUTH_REQUIRED"
    "DECODE_ERROR"
    "INVALID_REQUEST"
    "OK"
    "REQUEST_ERROR"
    "UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry ServerConnectedStateResponse_ResponseStatus_entries[] =
    {
        {{&ServerConnectedStateResponse_ResponseStatus_names[0], 13}, 5},
        {{&ServerConnectedStateResponse_ResponseStatus_names[13], 12}, 4},
        {{&ServerConnectedStateResponse_ResponseStatus_names[25], 15}, 2},
        {{&ServerConnectedStateResponse_ResponseStatus_names[40], 2}, 1},
        {{&ServerConnectedStateResponse_ResponseStatus_names[42], 13}, 3},
        {{&ServerConnectedStateResponse_ResponseStatus_names[55], 7}, 0},
};

static const int ServerConnectedStateResponse_ResponseStatus_entries_by_number[] = {
    5,  // 0 -> UNKNOWN
    3,  // 1 -> OK
    2,  // 2 -> INVALID_REQUEST
    4,  // 3 -> REQUEST_ERROR
    1,  // 4 -> DECODE_ERROR
    0,  // 5 -> AUTH_REQUIRED
};

const std::string& ServerConnectedStateResponse_ResponseStatus_Name(ServerConnectedStateResponse_ResponseStatus value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          ServerConnectedStateResponse_ResponseStatus_entries, ServerConnectedStateResponse_ResponseStatus_entries_by_number,
          6, ServerConnectedStateResponse_ResponseStatus_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      ServerConnectedStateResponse_ResponseStatus_entries, ServerConnectedStateResponse_ResponseStatus_entries_by_number, 6,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : ServerConnectedStateResponse_ResponseStatus_strings[idx].get();
}

bool ServerConnectedStateResponse_ResponseStatus_Parse(absl::string_view name, ServerConnectedStateResponse_ResponseStatus* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      ServerConnectedStateResponse_ResponseStatus_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ServerConnectedStateResponse_ResponseStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ServerConnectedStateResponse_ResponseStatus ServerConnectedStateResponse::UNKNOWN;
constexpr ServerConnectedStateResponse_ResponseStatus ServerConnectedStateResponse::OK;
constexpr ServerConnectedStateResponse_ResponseStatus ServerConnectedStateResponse::INVALID_REQUEST;
constexpr ServerConnectedStateResponse_ResponseStatus ServerConnectedStateResponse::REQUEST_ERROR;
constexpr ServerConnectedStateResponse_ResponseStatus ServerConnectedStateResponse::DECODE_ERROR;
constexpr ServerConnectedStateResponse_ResponseStatus ServerConnectedStateResponse::AUTH_REQUIRED;
constexpr ServerConnectedStateResponse_ResponseStatus ServerConnectedStateResponse::ResponseStatus_MIN;
constexpr ServerConnectedStateResponse_ResponseStatus ServerConnectedStateResponse::ResponseStatus_MAX;
constexpr int ServerConnectedStateResponse::ResponseStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t ClientAuthRequest_RequestType_internal_data_[] = {
    196608u, 0u, };
bool ClientAuthRequest_RequestType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    ClientAuthRequest_RequestType_strings[3] = {};

static const char ClientAuthRequest_RequestType_names[] = {
    "AUTH_INFO"
    "AUTH_SUPPLY"
    "UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry ClientAuthRequest_RequestType_entries[] =
    {
        {{&ClientAuthRequest_RequestType_names[0], 9}, 2},
        {{&ClientAuthRequest_RequestType_names[9], 11}, 1},
        {{&ClientAuthRequest_RequestType_names[20], 7}, 0},
};

static const int ClientAuthRequest_RequestType_entries_by_number[] = {
    2,  // 0 -> UNKNOWN
    1,  // 1 -> AUTH_SUPPLY
    0,  // 2 -> AUTH_INFO
};

const std::string& ClientAuthRequest_RequestType_Name(ClientAuthRequest_RequestType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          ClientAuthRequest_RequestType_entries, ClientAuthRequest_RequestType_entries_by_number,
          3, ClientAuthRequest_RequestType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      ClientAuthRequest_RequestType_entries, ClientAuthRequest_RequestType_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : ClientAuthRequest_RequestType_strings[idx].get();
}

bool ClientAuthRequest_RequestType_Parse(absl::string_view name, ClientAuthRequest_RequestType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      ClientAuthRequest_RequestType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ClientAuthRequest_RequestType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ClientAuthRequest_RequestType ClientAuthRequest::UNKNOWN;
constexpr ClientAuthRequest_RequestType ClientAuthRequest::AUTH_SUPPLY;
constexpr ClientAuthRequest_RequestType ClientAuthRequest::AUTH_INFO;
constexpr ClientAuthRequest_RequestType ClientAuthRequest::RequestType_MIN;
constexpr ClientAuthRequest_RequestType ClientAuthRequest::RequestType_MAX;
constexpr int ClientAuthRequest::RequestType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t ServerAuthResponse_ResponseStatus_internal_data_[] = {
    393216u, 0u, };
bool ServerAuthResponse_ResponseStatus_IsValid(int value) {
  return 0 <= value && value <= 5;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    ServerAuthResponse_ResponseStatus_strings[6] = {};

static const char ServerAuthResponse_ResponseStatus_names[] = {
    "AUTH_ACCEPT"
    "AUTH_CONTINUE"
    "AUTH_REJECT"
    "DECODE_ERROR"
    "INVALID_REQUEST"
    "UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry ServerAuthResponse_ResponseStatus_entries[] =
    {
        {{&ServerAuthResponse_ResponseStatus_names[0], 11}, 1},
        {{&ServerAuthResponse_ResponseStatus_names[11], 13}, 3},
        {{&ServerAuthResponse_ResponseStatus_names[24], 11}, 2},
        {{&ServerAuthResponse_ResponseStatus_names[35], 12}, 5},
        {{&ServerAuthResponse_ResponseStatus_names[47], 15}, 4},
        {{&ServerAuthResponse_ResponseStatus_names[62], 7}, 0},
};

static const int ServerAuthResponse_ResponseStatus_entries_by_number[] = {
    5,  // 0 -> UNKNOWN
    0,  // 1 -> AUTH_ACCEPT
    2,  // 2 -> AUTH_REJECT
    1,  // 3 -> AUTH_CONTINUE
    4,  // 4 -> INVALID_REQUEST
    3,  // 5 -> DECODE_ERROR
};

const std::string& ServerAuthResponse_ResponseStatus_Name(ServerAuthResponse_ResponseStatus value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          ServerAuthResponse_ResponseStatus_entries, ServerAuthResponse_ResponseStatus_entries_by_number,
          6, ServerAuthResponse_ResponseStatus_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      ServerAuthResponse_ResponseStatus_entries, ServerAuthResponse_ResponseStatus_entries_by_number, 6,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : ServerAuthResponse_ResponseStatus_strings[idx].get();
}

bool ServerAuthResponse_ResponseStatus_Parse(absl::string_view name, ServerAuthResponse_ResponseStatus* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      ServerAuthResponse_ResponseStatus_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<ServerAuthResponse_ResponseStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ServerAuthResponse_ResponseStatus ServerAuthResponse::UNKNOWN;
constexpr ServerAuthResponse_ResponseStatus ServerAuthResponse::AUTH_ACCEPT;
constexpr ServerAuthResponse_ResponseStatus ServerAuthResponse::AUTH_REJECT;
constexpr ServerAuthResponse_ResponseStatus ServerAuthResponse::AUTH_CONTINUE;
constexpr ServerAuthResponse_ResponseStatus ServerAuthResponse::INVALID_REQUEST;
constexpr ServerAuthResponse_ResponseStatus ServerAuthResponse::DECODE_ERROR;
constexpr ServerAuthResponse_ResponseStatus ServerAuthResponse::ResponseStatus_MIN;
constexpr ServerAuthResponse_ResponseStatus ServerAuthResponse::ResponseStatus_MAX;
constexpr int ServerAuthResponse::ResponseStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class KexMsg::_Internal {
 public:
};

KexMsg::KexMsg(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:KexMsg)
}
inline PROTOBUF_NDEBUG_INLINE KexMsg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : pkey_(arena, from.pkey_),
        _cached_size_{0} {}

KexMsg::KexMsg(
    ::google::protobuf::Arena* arena,
    const KexMsg& from)
    : ::google::protobuf::MessageLite(arena) {
  KexMsg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.alg_ = from._impl_.alg_;

  // @@protoc_insertion_point(copy_constructor:KexMsg)
}
inline PROTOBUF_NDEBUG_INLINE KexMsg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : pkey_(arena),
        _cached_size_{0} {}

inline void KexMsg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.alg_ = {};
}
KexMsg::~KexMsg() {
  // @@protoc_insertion_point(destructor:KexMsg)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void KexMsg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.pkey_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
KexMsg::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[7];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(KexMsg, _impl_._cached_size_),
          true,
      },
      "KexMsg",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void KexMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:KexMsg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pkey_.ClearToEmpty();
  _impl_.alg_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* KexMsg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> KexMsg::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_KexMsg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::KexMsg>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes pkey = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(KexMsg, _impl_.pkey_)}},
    // .KexMsg.KexAlg alg = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(KexMsg, _impl_.alg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .KexMsg.KexAlg alg = 1;
    {PROTOBUF_FIELD_OFFSET(KexMsg, _impl_.alg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes pkey = 2;
    {PROTOBUF_FIELD_OFFSET(KexMsg, _impl_.pkey_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* KexMsg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KexMsg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .KexMsg.KexAlg alg = 1;
  if (this->_internal_alg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_alg(), target);
  }

  // bytes pkey = 2;
  if (!this->_internal_pkey().empty()) {
    const std::string& _s = this->_internal_pkey();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KexMsg)
  return target;
}

::size_t KexMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KexMsg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pkey = 2;
  if (!this->_internal_pkey().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_pkey());
  }

  // .KexMsg.KexAlg alg = 1;
  if (this->_internal_alg() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_alg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void KexMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const KexMsg*>(
      &from));
}

void KexMsg::MergeFrom(const KexMsg& from) {
  KexMsg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:KexMsg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pkey().empty()) {
    _this->_internal_set_pkey(from._internal_pkey());
  }
  if (from._internal_alg() != 0) {
    _this->_impl_.alg_ = from._impl_.alg_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void KexMsg::CopyFrom(const KexMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KexMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool KexMsg::IsInitialized() const {
  return true;
}

void KexMsg::InternalSwap(KexMsg* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pkey_, &other->_impl_.pkey_, arena);
  swap(_impl_.alg_, other->_impl_.alg_);
}

// ===================================================================

class ClientConnectedStateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientConnectedStateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_._has_bits_);
};

ClientConnectedStateRequest::ClientConnectedStateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClientConnectedStateRequest)
}
inline PROTOBUF_NDEBUG_INLINE ClientConnectedStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ClientConnectedStateRequest::ClientConnectedStateRequest(
    ::google::protobuf::Arena* arena,
    const ClientConnectedStateRequest& from)
    : ::google::protobuf::MessageLite(arena) {
  ClientConnectedStateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.kex_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::KexMsg>(
                              arena, *from._impl_.kex_)
                        : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:ClientConnectedStateRequest)
}
inline PROTOBUF_NDEBUG_INLINE ClientConnectedStateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ClientConnectedStateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, kex_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, kex_) +
               sizeof(Impl_::type_));
}
ClientConnectedStateRequest::~ClientConnectedStateRequest() {
  // @@protoc_insertion_point(destructor:ClientConnectedStateRequest)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ClientConnectedStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.kex_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ClientConnectedStateRequest::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[28];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_._cached_size_),
          true,
      },
      "ClientConnectedStateRequest",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void ClientConnectedStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientConnectedStateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.kex_ != nullptr);
    _impl_.kex_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientConnectedStateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ClientConnectedStateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ClientConnectedStateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ClientConnectedStateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .KexMsg kex = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_.kex_)}},
    // .ClientConnectedStateRequest.RequestType type = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .ClientConnectedStateRequest.RequestType type = 1;
    {PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional .KexMsg kex = 2;
    {PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_.kex_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::KexMsg>()},
  }}, {{
  }},
};

::uint8_t* ClientConnectedStateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientConnectedStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .ClientConnectedStateRequest.RequestType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .KexMsg kex = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.kex_, _impl_.kex_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientConnectedStateRequest)
  return target;
}

::size_t ClientConnectedStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientConnectedStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .KexMsg kex = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kex_);
  }

  // .ClientConnectedStateRequest.RequestType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ClientConnectedStateRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientConnectedStateRequest*>(
      &from));
}

void ClientConnectedStateRequest::MergeFrom(const ClientConnectedStateRequest& from) {
  ClientConnectedStateRequest* const _this = this;
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientConnectedStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.kex_ != nullptr);
    if (_this->_impl_.kex_ == nullptr) {
      _this->_impl_.kex_ =
          ::google::protobuf::MessageLite::CopyConstruct<::KexMsg>(arena, *from._impl_.kex_);
    } else {
      _this->_impl_.kex_->MergeFrom(*from._impl_.kex_);
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientConnectedStateRequest::CopyFrom(const ClientConnectedStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientConnectedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ClientConnectedStateRequest::IsInitialized() const {
  return true;
}

void ClientConnectedStateRequest::InternalSwap(ClientConnectedStateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_.type_)
      + sizeof(ClientConnectedStateRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ClientConnectedStateRequest, _impl_.kex_)>(
          reinterpret_cast<char*>(&_impl_.kex_),
          reinterpret_cast<char*>(&other->_impl_.kex_));
}

// ===================================================================

class ServerConnectedStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerConnectedStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_._has_bits_);
};

ServerConnectedStateResponse::ServerConnectedStateResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerConnectedStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE ServerConnectedStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        iv_(arena, from.iv_) {}

ServerConnectedStateResponse::ServerConnectedStateResponse(
    ::google::protobuf::Arena* arena,
    const ServerConnectedStateResponse& from)
    : ::google::protobuf::MessageLite(arena) {
  ServerConnectedStateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.kex_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::MessageLite::CopyConstruct<::KexMsg>(
                              arena, *from._impl_.kex_)
                        : nullptr;
  _impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:ServerConnectedStateResponse)
}
inline PROTOBUF_NDEBUG_INLINE ServerConnectedStateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        iv_(arena) {}

inline void ServerConnectedStateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, kex_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, kex_) +
               sizeof(Impl_::status_));
}
ServerConnectedStateResponse::~ServerConnectedStateResponse() {
  // @@protoc_insertion_point(destructor:ServerConnectedStateResponse)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ServerConnectedStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.iv_.Destroy();
  delete _impl_.kex_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ServerConnectedStateResponse::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[29];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_._cached_size_),
          true,
      },
      "ServerConnectedStateResponse",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void ServerConnectedStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerConnectedStateResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.iv_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kex_ != nullptr);
      _impl_.kex_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ServerConnectedStateResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> ServerConnectedStateResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ServerConnectedStateResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ServerConnectedStateResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ServerConnectedStateResponse.ResponseStatus status = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_.status_)}},
    // optional .KexMsg kex = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_.kex_)}},
    // optional bytes iv = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_.iv_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .ServerConnectedStateResponse.ResponseStatus status = 1;
    {PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional .KexMsg kex = 2;
    {PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_.kex_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes iv = 3;
    {PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_.iv_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::KexMsg>()},
  }}, {{
  }},
};

::uint8_t* ServerConnectedStateResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerConnectedStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .ServerConnectedStateResponse.ResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .KexMsg kex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.kex_, _impl_.kex_->GetCachedSize(), target, stream);
  }

  // optional bytes iv = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_iv();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerConnectedStateResponse)
  return target;
}

::size_t ServerConnectedStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerConnectedStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes iv = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_iv());
    }

    // optional .KexMsg kex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.kex_);
    }

  }
  // .ServerConnectedStateResponse.ResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ServerConnectedStateResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerConnectedStateResponse*>(
      &from));
}

void ServerConnectedStateResponse::MergeFrom(const ServerConnectedStateResponse& from) {
  ServerConnectedStateResponse* const _this = this;
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerConnectedStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_iv(from._internal_iv());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kex_ != nullptr);
      if (_this->_impl_.kex_ == nullptr) {
        _this->_impl_.kex_ =
            ::google::protobuf::MessageLite::CopyConstruct<::KexMsg>(arena, *from._impl_.kex_);
      } else {
        _this->_impl_.kex_->MergeFrom(*from._impl_.kex_);
      }
    }
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerConnectedStateResponse::CopyFrom(const ServerConnectedStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerConnectedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ServerConnectedStateResponse::IsInitialized() const {
  return true;
}

void ServerConnectedStateResponse::InternalSwap(ServerConnectedStateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iv_, &other->_impl_.iv_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_.status_)
      + sizeof(ServerConnectedStateResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ServerConnectedStateResponse, _impl_.kex_)>(
          reinterpret_cast<char*>(&_impl_.kex_),
          reinterpret_cast<char*>(&other->_impl_.kex_));
}

// ===================================================================

class ClientAuthRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientAuthRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_._has_bits_);
};

ClientAuthRequest::ClientAuthRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClientAuthRequest)
}
inline PROTOBUF_NDEBUG_INLINE ClientAuthRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        username_(arena, from.username_),
        authcredential_(arena, from.authcredential_) {}

ClientAuthRequest::ClientAuthRequest(
    ::google::protobuf::Arena* arena,
    const ClientAuthRequest& from)
    : ::google::protobuf::MessageLite(arena) {
  ClientAuthRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.request_ = from._impl_.request_;

  // @@protoc_insertion_point(copy_constructor:ClientAuthRequest)
}
inline PROTOBUF_NDEBUG_INLINE ClientAuthRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        username_(arena),
        authcredential_(arena) {}

inline void ClientAuthRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.request_ = {};
}
ClientAuthRequest::~ClientAuthRequest() {
  // @@protoc_insertion_point(destructor:ClientAuthRequest)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ClientAuthRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.username_.Destroy();
  _impl_.authcredential_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ClientAuthRequest::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[18];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_._cached_size_),
          true,
      },
      "ClientAuthRequest",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void ClientAuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientAuthRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.authcredential_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.request_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientAuthRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 34, 2> ClientAuthRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ClientAuthRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ClientAuthRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .ClientAuthRequest.RequestType request = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_.request_)}},
    // optional string username = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_.username_)}},
    // optional bytes authCredential = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_.authcredential_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .ClientAuthRequest.RequestType request = 1;
    {PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_.request_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional string username = 2;
    {PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_.username_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional bytes authCredential = 3;
    {PROTOBUF_FIELD_OFFSET(ClientAuthRequest, _impl_.authcredential_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\21\0\10\0\0\0\0\0"
    "ClientAuthRequest"
    "username"
  }},
};

::uint8_t* ClientAuthRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientAuthRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .ClientAuthRequest.RequestType request = 1;
  if (this->_internal_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_request(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string username = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_username();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ClientAuthRequest.username");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bytes authCredential = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_authcredential();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientAuthRequest)
  return target;
}

::size_t ClientAuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientAuthRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string username = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_username());
    }

    // optional bytes authCredential = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_authcredential());
    }

  }
  // .ClientAuthRequest.RequestType request = 1;
  if (this->_internal_request() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ClientAuthRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientAuthRequest*>(
      &from));
}

void ClientAuthRequest::MergeFrom(const ClientAuthRequest& from) {
  ClientAuthRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ClientAuthRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_authcredential(from._internal_authcredential());
    }
  }
  if (from._internal_request() != 0) {
    _this->_impl_.request_ = from._impl_.request_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientAuthRequest::CopyFrom(const ClientAuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientAuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ClientAuthRequest::IsInitialized() const {
  return true;
}

void ClientAuthRequest::InternalSwap(ClientAuthRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authcredential_, &other->_impl_.authcredential_, arena);
  swap(_impl_.request_, other->_impl_.request_);
}

// ===================================================================

class ServerAuthResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerAuthResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ServerAuthResponse, _impl_._has_bits_);
};

ServerAuthResponse::ServerAuthResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServerAuthResponse)
}
inline PROTOBUF_NDEBUG_INLINE ServerAuthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        serverinfo_(arena, from.serverinfo_) {}

ServerAuthResponse::ServerAuthResponse(
    ::google::protobuf::Arena* arena,
    const ServerAuthResponse& from)
    : ::google::protobuf::MessageLite(arena) {
  ServerAuthResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:ServerAuthResponse)
}
inline PROTOBUF_NDEBUG_INLINE ServerAuthResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        serverinfo_(arena) {}

inline void ServerAuthResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
ServerAuthResponse::~ServerAuthResponse() {
  // @@protoc_insertion_point(destructor:ServerAuthResponse)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ServerAuthResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.serverinfo_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ServerAuthResponse::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[19];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(ServerAuthResponse, _impl_._cached_size_),
          true,
      },
      "ServerAuthResponse",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void ServerAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerAuthResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.serverinfo_.ClearNonDefaultToEmpty();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ServerAuthResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 37, 2> ServerAuthResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServerAuthResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ServerAuthResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ServerAuthResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string serverInfo = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ServerAuthResponse, _impl_.serverinfo_)}},
    // .ServerAuthResponse.ResponseStatus status = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ServerAuthResponse, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .ServerAuthResponse.ResponseStatus status = 1;
    {PROTOBUF_FIELD_OFFSET(ServerAuthResponse, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional string serverInfo = 2;
    {PROTOBUF_FIELD_OFFSET(ServerAuthResponse, _impl_.serverinfo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\12\0\0\0\0\0"
    "ServerAuthResponse"
    "serverInfo"
  }},
};

::uint8_t* ServerAuthResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerAuthResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .ServerAuthResponse.ResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string serverInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_serverinfo();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ServerAuthResponse.serverInfo");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerAuthResponse)
  return target;
}

::size_t ServerAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerAuthResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string serverInfo = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_serverinfo());
  }

  // .ServerAuthResponse.ResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ServerAuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerAuthResponse*>(
      &from));
}

void ServerAuthResponse::MergeFrom(const ServerAuthResponse& from) {
  ServerAuthResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerAuthResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_internal_set_serverinfo(from._internal_serverinfo());
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerAuthResponse::CopyFrom(const ServerAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ServerAuthResponse::IsInitialized() const {
  return true;
}

void ServerAuthResponse::InternalSwap(ServerAuthResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.serverinfo_, &other->_impl_.serverinfo_, arena);
  swap(_impl_.status_, other->_impl_.status_);
}

// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
